print("Hi")

# 以#开头的语句是注释，注释是给人看的，可以是任意内容，解释器会忽略掉注释。
# python基础
a = -1
if a >= 0:
  print(a)
else:
  print(-a)
# 当语句以冒号:结尾时，缩进的语句视为代码块。

# Python程序是大小写敏感的，如果写错了大小写，程序会报错。
# Python使用缩进来组织代码块，请务必遵守约定俗成的习惯，坚持使用4个空格的缩进。

# 数据类型
  # 整数
    # 注意：Python的整数没有大小限制
    # 十六进制用0x前缀和0-9，a-f表示，例如：0xff00
    # Python允许在数字中间以_分隔，因此，写成10_000_000_000和10000000000是完全一样的。
  # 浮点数
    # Python的浮点数也没有大小限制，但是超出一定范围就直接表示为inf（无限大）。
    # 浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109和12.3x108是完全相等的。
    # 对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是1.23e9
  # 整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的，而浮点数运算则可能会有四舍五入的误差。
    # 整数的除法为什么也是精确的
      # 在Python中，有两种除法，要做精确的除法，使用/就可以。
        # 一种除法是/：计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：
          # >>> 9 / 3
          # 3.0
        # 还有一种除法是//，称为地板除，两个整数的除法仍然是整数：
          # >>> 10 // 3
          # 3
        # Python还提供一个余数运算，可以得到两个整数相除的余数：
          # >>> 10 % 3 
          # 1
  
  # 字符串
    # 以单引号'或双引号"括起来的任意文本
    # 如果字符串内部既包含'又包含",可以用转义字符\来标识 'I\'m \"OK\"!' 表示的字符串内容是：I'm "OK"!
    # 如果字符串里面有很多字符都需要转义，就需要加很多\，为了简化，Python还允许用r''表示''内部的字符串默认不转义
      # >>> print('\\\t\\')
      # \       \
      # >>> print(r'\\\t\\')
      # \\\t\\

    # 如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用'''...'''的格式表示多行内容
      # >>> print('''line1
      # ... line2
      # ... line3''')
      # line1
      # line2
      # line3

      # print(r'''hello,\n
      # world''')
      # hello,\n
      # world
    # len()函数计算的是str的字符数
      # >>> len('中文')
      # 2
      # 如果换成bytes，len()函数就计算字节数：
        # >>> len('中文'.encode('utf-8'))
        # 6 # 1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节。
      # 为了避免乱码问题，应当始终坚持使用UTF-8编码对str和bytes进行转换。
        # 在保存源代码时，就需要务必指定保存为UTF-8编码。
        # Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：
          # !/usr/bin/env python3
          # -*- coding: utf-8 -*-
          # 第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；
          # 第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。
    # 在最新的Python 3版本中，字符串是以Unicode编码的
      # 对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符：
        # >>> ord('中')
        # 20013
        # >>> chr(66)
        # 'B'
      # 还可以用十六进制这么写str：
        # >>> '\u4e2d\u6587'
        # '中文'
    # 字符编码
      # 计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。
      # 最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），如果要表示更大的整数，就必须用更多的字节。
      # 由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码，比如大写字母A的编码是65
      # 但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了GB2312编码，用来把中文编进去。
      # 全世界有上百种语言，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。因此Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。
      # Unicode编码最常用的是UCS-16编码，用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。
      # 但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。
      # 又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。
      # 现在计算机系统通用的字符编码工作方式：
        # 在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes。
          # bytes类型的数据用带b前缀的单引号或双引号表示：x = b'ABC'
          # bytes的每个字符都只占用一个字节。
          # 以Unicode表示的str通过encode()方法可以编码为指定的bytes
            # 含有中文的str可以用UTF-8编码为bytes。含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围，Python会报错。
              # >>> '中文'.encode('utf-8')
              # b'\xe4\xb8\xad\xe6\x96\x87'
              # >>> '中文'.encode('ascii')
              # Traceback (most recent call last):
          # 从网络或磁盘上读取了字节流，那么读到的数据就是bytes。要把bytes变为str，就需要用decode()方法
            # >>> b'ABC'.decode('ascii')
            # 'ABC'
            # 如果bytes中包含无法解码的字节，decode()方法会报错。如果bytes中只有一小部分无效的字节，可以传入errors='ignore'忽略错误的字节：
              # >>> b'\xe4\xb8\xad\xff'.decode('utf-8', errors='ignore')
              # '中'
        # 在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。
        # 用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件
        # 浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器，网页的源码上会有类似<meta charset="UTF-8" />的信息，表示该网页正是用的UTF-8编码。
    # 如何输出格式化的字符串
      # '亲爱的xxx你好！你xx月的话费是xx，余额是xx'之类的字符串，而xxx的内容都是根据变量变化的
      # Python中，采用的格式化方式和C语言是一致的，用%实现
        # >>> 'Hi, %s, you have $%d.' % ('Michael', 1000000)
        # 'Hi, Michael, you have $1000000.'
          # %d	整数
          # %f	浮点数
          # %s	字符串
          # %x	十六进制整数
          # 格式化整数和浮点数还可以指定是否补0和整数与小数的位数
            # print('%.2f' % 3.1415926)
            # 3.14
            # print('%03d' % 3)
            # 003
        # 如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串
        # 有些时候，字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%：
          # >>> 'growth rate: %d %%' % 7
          # 'growth rate: 7 %'
      # 另一种格式化字符串的方法是使用字符串的format()方法
        # >>> 'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125)
        # 'Hello, 小明, 成绩提升了 17.1%'
      # 最后一种格式化字符串的方法是使用以f开头的字符串，称之为f-string，它和普通字符串不同之处在于，字符串如果包含{xxx}，就会以对应的变量替换
        # >>> r = 2.5
        # >>> s = 3.14 * r ** 2
        # >>> print(f'The area of a circle with radius {r} is {s:.2f}')
        # The area of a circle with radius 2.5 is 19.62
      # 练习：小明的成绩从去年的72分提升到了今年的85分，请计算小明成绩提升的百分点，并用字符串格式化显示出'xx.x%'，只保留小数点后1位：
        # s1 = 72
        # s2 = 85
        # r = (s2-s1)/s1*100
        # print(r) # 18.055555555555554
        # print(f'{r:.1f}%') # 18.1%
        # print('%.1f%%' % r) # 18.1%
  # 布尔值
    # 在Python中，可以直接用True、False表示布尔值（请注意大小写）
    # 布尔值可以用and、or和not运算。
      # >>> True and False
      # False
      # >>> not True
      # False
    # 布尔值经常用在条件判断中
      # if age >= 18:
      #     print('adult')
      # else:
      #     print('teenager')
  
  # 空值
    # 空值是Python里一个特殊的值，用None表示。

# 变量
  # 变量名必须是大小写英文、数字和_的组合，且不能用数字开头
  # 在Python中，等号=是赋值语句，对变量赋值就是把数据和变量给关联起来
    # a = 123 # a是整数
    # print(a)
    # a = 'ABC' # a变为字符串 - 同一个变量可以反复赋值，而且可以是不同类型的变量
    # print(a)
  # 这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。
  # 理解变量在计算机内存中的表示
    # a = 'ABC'
    # Python解释器干了两件事情：
    # 在内存中创建了一个'ABC'的字符串；
    # 在内存中创建了一个名为a的变量，并把它指向'ABC'。
    # b = a
    # 解释器创建了变量b，并把b指向a指向的字符串'ABC'

  # 常量
    # 在Python中，通常用全部大写的变量名表示常量：PI = 3.14159265359









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































